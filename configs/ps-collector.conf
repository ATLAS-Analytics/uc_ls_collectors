input {

  http {
    host => "0.0.0.0"
    port => "80"
  }
  
}

filter {

  mutate {
    remove_field => ["reference", "headers", "task", "schedule", "participants", "run", "tool", "@version", "schedule", "host"]
    copy => { "[run][end-time]" => "timestamp" }
    copy => { "@timestamp" => "ingest_timestamp" }
    copy => { "[test][spec][source]" => "src_host" }
    copy => { "[test][spec][dest]" => "dest_host" }
    rename => { "id" => "[@metadata][id]" } 
    add_field => { "push" => true }
  }
  
  memcached {
    hosts => ["memcached"]
    get => {
      "ip_%{src_host}" => "[source]"
      "ip_%{dest_host}" => "[destination]"
      "vo_%{[src_host]}" => "[src_VO]"
      "si_%{[src_host]}" => "[src_site]"
      "pr_%{[src_host]}" => "[src_production]"
      "vo_%{[dest_host]}" => "[dest_VO]"
      "si_%{[dest_host]}" => "[dest_site]"
      "pr_%{[dest_host]}" => "[dest_production]"
    }
  }

  if ![source] or ![destination]{
    ruby { path => "/usr/share/logstash/filters/enrich.rb" }
    memcached {
      hosts => ["memcached"]
      ttl => 43200
      set => {
        "source" => "ip_%{src_host}"
        "destination" => "ip_%{dest_host}"
        # "src_VO" => "vo_%{[src_host]}" this is set from an external code
        # "dest_VO" => "vo_%{[dest_host]}" 
        # "src_site" => "si_%{[src_host]}" 
        # "dest_site" => "si_%{[dest_host]}" 
        # "src_production" => "pr_%{[src_host]}"
        # "dest_production" => "pr_%{[dest_host]}"
      }
    }
  }
  
  mutate { 
    convert => { "src_production" => "boolean" }
    convert => { "dest_production" => "boolean" }
    convert => { "push" => "boolean" }
  }

  if [test][type]=="trace" {

    mutate { add_field => { "[@metadata][type]" => "trace" } }

    if "[test][ip-version]" == 6 {
      mutate { 
        add_field => { "ipv6" => true } 
        add_field => { "src" => "%{source.ipv6}" } 
        add_field => { "dest" => "%{destination.ipv6}" } 
      }
    } else {
      mutate { 
        add_field => { "ipv6" => false } 
        add_field => { "src" => "%{source.ipv4}" } 
        add_field => { "dest" => "%{destination.ipv4}" } 
        }
    }

    ruby { path => "/usr/share/logstash/filters/trace.rb" }

    # if "_rubyexception" not in [tags] { just for debugging.
    mutate{
      convert => { "ipv6" => "boolean" }
      remove_field => ["type", "test", "result", "@timestamp"] 
    }
    # }
  
  }
  
  else if [test][type]=="throughput" {

    mutate {
      add_field => { "[@metadata][type]" => "throughput" } 
      copy => { "[result][summary][summary][throughput-bytes]" => "throughput"}
      copy => { "[result][summary][summary][retransmits]" => "retransmits"}
    }

    if "[test][ip-version]" == 6 {
      mutate { 
        add_field => { "ipv6" => true } 
        add_field => { "src" => "%{source.ipv6}" } 
        add_field => { "dest" => "%{destination.ipv6}" } 
      }
    } else {
      mutate { 
        add_field => { "ipv6" => false } 
        add_field => { "src" => "%{source.ipv4}" } 
        add_field => { "dest" => "%{destination.ipv4}" } 
        }
    }

    mutate{
      convert => { "ipv6" => "boolean" }
      remove_field => ["type", "test", "result", "@timestamp"]
    }

  } 
  
  else if [test][type]=="latencybg" {
    
    mutate{  add_field => { "[@metadata][type]" => "packetloss" }  }

    # duplicate
    clone { clones => ["owd"] }


    if [type] == "owd" {

      ruby { path => "/usr/share/logstash/filters/latency.rb" }
      mutate{ replace => [ "[@metadata][type]", "owd" ] }

    } else { # packetloss
      mutate {
        copy => { "[result][packets-lost]" => "packets-lost" }
        copy => { "[result][packets-duplicated]" => "packets-duplicated" }
        copy => { "[result][packets-reordered]" => "packets-reordered" }
        copy => { "[result][packets-sent]" => "packets-sent" }
      }
    }
    
    mutate{ remove_field => ["type", "test", "result", "@timestamp"] }

  } 
  
  else {
    mutate {
      add_field => { "[@metadata][type]" => "unknown" } 
    }
  }
  
}

output {

  # stdout {
  #   codec => json
  # }

  if "_jsonparsefailure" in [tags] {
    file {
      path => "/var/log/logstash/json_parse_failure.txt"
    }
  }
  else if "_rubyexception" in [tags] {
    file {
      path => "/var/log/logstash/ruby_exception.json"
    }
  }
  # else {
  #   file{
  #     path => "/var/log/logstash/correct_%{[@metadata][type]}.json"
  #   }
  # }

  elasticsearch {
    hosts => "atlas-kibana.mwt2.org"
    data_stream => false
    ssl => true
    index => 'test_ps_%{[@metadata][type]}-%{+YYYY.MM.dd}'
    user => "uc_logstash_indexer"
    password => "${LOGSTASH_PWD}"
    document_id => "%{[@metadata][id]}"
  }

}
