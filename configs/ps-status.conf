input {

  http {
    host => "0.0.0.0"
    port => "80"
  }
  
}

filter {

  if [test][type]=="meta" {
    mutate { add_field => { "[@metadata][type]" => "meta" } }
  }
  else if [test][type]=="status" {
    mutate { add_field => { "[@metadata][type]" => "status" } }
  }
  else {
    drop{ }
  }

  mutate {
    # remove_field => ["reference", "headers", "task", "schedule", "participants", "run", "tool", "@version", "schedule", "host"]
    remove_field => [ "headers", "@version"]
    copy => { "@timestamp" => "ingest_timestamp" }
    rename => { "id" => "[@metadata][id]" } 
  }
  
  memcached {
    hosts => ["memcached"]
    get => {
      "ip_%{host}" => "[host_ip]"
      "vo_%{[host]}" => "[VO]"
      "sitename_%{[host]}" => "[site]"
      "rcsite_%{[host]}" => "[rcsite]"
      "production_%{[host]}" => "[production]"
    }
  }

  if ![host_ip] {
    ruby { path => "/usr/share/logstash/filters/enrich_single.rb" }
    memcached {
      hosts => ["memcached"]
      ttl => 43200
      set => {
        "host_ip" => "ip_%{host}"
      }
    }
  }
  
  mutate { 
    convert => { "production" => "boolean" }
  }
  
  if ![tags] { # for problematic things don't remove fields
    mutate{
      remove_field => ["type", "test", "result", "@timestamp"] 
      convert => { "ipv6" => "boolean" }
    }
  }

}

output {

  stdout {
    codec => json
  }

  if "_jsonparsefailure" in [tags] {
    file {
      path => "/var/log/logstash/json_parse_failure.txt"
    }
  }
  else if "_rubyexception" in [tags] {
    file {
      path => "/var/log/logstash/ruby_exception.json"
    }
  }  
  # else if "_bad_document" in [tags] {
  #   file {
  #     path => "/var/log/logstash/bad_document.json"
  #   }
  # }
  # else {
  #   file{
  #     path => "/var/log/logstash/correct_%{[@metadata][type]}.json"
  #   }
  # }

  elasticsearch {
    hosts => "atlas-kibana.mwt2.org"
    data_stream => false
    ssl => true
    index => 'test_ps_%{[@metadata][type]}'
    user => "uc_logstash_indexer"
    password => "${LOGSTASH_PWD}"
    document_id => "%{[@metadata][id]}"
  }

}
