input { pipeline { address => "ps-status" } }

filter {

  mutate {
    add_field => { "[@metadata][type]" => "status" } 
    remove_field => [ "headers", "@version", "host"]
    copy => { "@timestamp" => "ingest_timestamp" }
  }
  
  memcached {
    hosts => ["memcached"]
    get => {
      "vo_%{[ps_host]}" => "[VO]"
      "sitename_%{[ps_host]}" => "[site]"
      "rcsite_%{[ps_host]}" => "[rcsite]"
      "production_%{[ps_host]}" => "[production]"
    }
  }
  
  mutate { 
    rename => { "ps_host" => "[host]" } 
    uppercase => [ "VO" ]
    convert => { "production" => "boolean" }
  }
  
  if ![tags] { # for problematic things don't remove fields
    mutate{
      remove_field => ["type", "@timestamp"] 
    }
  }

}

output {

  stdout {
    codec => json
  }

  if "_jsonparsefailure" in [tags] {
    file {
      path => "/var/log/logstash/json_parse_failure.txt"
    }
  }

  elasticsearch {
    hosts => "atlas-kibana.mwt2.org"
    data_stream => false
    ssl => true
    index => 'test_ps_%{[@metadata][type]}'
    user => "uc_logstash_indexer"
    password => "${LOGSTASH_PWD}"
  }

}
