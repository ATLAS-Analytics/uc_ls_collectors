input { pipeline { address => "ps-meta" } }

filter {

  mutate { 
    add_field => { "[@metadata][type]" => "ps_meta_write" } 
    convert => { "[configuration][allow_internal_addresses]" => "boolean" }
    convert => { "[services][esmond][enabled]" => "boolean" }
    convert => { "[services][lsregistration][enabled]" => "boolean" }
    convert => { "[services][owamp][enabled]" => "boolean" }
    convert => { "[services][pscheduler][enabled]" => "boolean" }
    convert => { "[services][psconfig][enabled]" => "boolean" }
    convert => { "[services][twamp][enabled]" => "boolean" }
    convert => { "[services][archive][enabled]" => "boolean" }
    convert => { "[services][meshconfig-agent][enabled]" => "boolean" }
    convert => { "[services][globally_registered][enabled]" => "boolean" }
    convert => { "[is_vm]" => "boolean" }
  }

  mutate {
    remove_field => [ "headers", "@version", "host"]
    copy => { "@timestamp" => "ingest_timestamp" }
  }
  
  # memcached {
  #   hosts => ["memcached"]
  #   get => {
  #     "vo_%{[ps_host]}" => "[VO]"
  #     "sitename_%{[ps_host]}" => "[site]"
  #     "rcsite_%{[ps_host]}" => "[rcsite]"
  #     "production_%{[ps_host]}" => "[production]"
  #   }
  # }
  
  mutate { 
    rename => { "ps_host" => "[host]" } 
    uppercase => [ "VO" ]
    convert => { "production" => "boolean" }
  }
  
  uuid {
    target    => "[@metadata][id]"
  }

  if ![tags] { # for problematic things don't remove fields
    mutate{
      remove_field => ["type", "@timestamp"] 
    }
  }

}

output {
  pipeline { send_to => ["es-output"] }
}
